generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_in        Int?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            Int         @id @default(autoincrement())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    User_role     User_role[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Role {
    id        Int         @id @default(autoincrement()) // @db.UnsignedInt
    name      String      @unique() // @db.TinyText
    createdAt DateTime    @default(now())
    updatedAt DateTime    @default(now()) @updatedAt
    users     User_role[]
}

model User_role {
    id        Int      @id @default(autoincrement()) // @db.UnsignedInt
    userId    Int // @db.UnsignedInt
    roleId    Int // @db.UnsignedInt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index(userId)
    @@index(roleId)
}
